<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Wehner&#39;s blog</title>
    <link>https://dawehner.github.io/feed.xml</link>
    <description>Recent content on Daniel Wehner&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Aug 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://dawehner.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Find out that an application is listen on a given port</title>
      <link>https://dawehner.github.io/posts/2019-08-22-application-listen-port/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2019-08-22-application-listen-port/</guid>
      <description>Choose one of those:
lsof -i | grep LISTEN | grep 3030 netstat -ltnp | grep -w &#39;:3030&#39; fuser 3030  </description>
    </item>
    
    <item>
      <title>Show largest mysql tables</title>
      <link>https://dawehner.github.io/posts/2019-08-05-largest-mysql/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2019-08-05-largest-mysql/</guid>
      <description>Here is a small sql commando to show the largest mysql tables on your system.
SELECT CONCAT(table_schema, &amp;#39;.&amp;#39;, table_name), CONCAT(ROUND(table_rows / 1000000, 2), &amp;#39;M&amp;#39;) rows, CONCAT(ROUND(data_length / ( 1024 * 1024 * 1024 ), 2), &amp;#39;G&amp;#39;) DATA, CONCAT(ROUND(index_length / ( 1024 * 1024 * 1024 ), 2), &amp;#39;G&amp;#39;) idx, CONCAT(ROUND(( data_length + index_length ) / ( 1024 * 1024 * 1024 ), 2), &amp;#39;G&amp;#39;) total_size, ROUND(index_length / data_length, 2) idxfrac FROM information_schema.</description>
    </item>
    
    <item>
      <title>Seeing the screen in black and white</title>
      <link>https://dawehner.github.io/posts/2018-11-26-display-black-white/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2018-11-26-display-black-white/</guid>
      <description>Recently I&amp;rsquo;ve been thinking a lot about what matters to me. As many people I struggle with spending too much time on the internet. Content consumable in small little pieces like tweets, titles on hackernews or simply images on reddit let&amp;rsquo;s you feel good temporarily, but as long you don&amp;rsquo;t consume it purposefully, it didn&amp;rsquo;t really give me anything longterm.
End of October I stumbled upon digital wellbeing on Android: It allows you to set a certain time of the night, at which notifications gets disabled and your screen becomes black and white.</description>
    </item>
    
    <item>
      <title>Quickstarting Drupal 8</title>
      <link>https://dawehner.github.io/posts/2018-05-03-drupal-quick-start/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2018-05-03-drupal-quick-start/</guid>
      <description>Before and around Drupalcon Nashville there was a lot of discussion around improving the first time experience. Things we achieved for example is a new Drupal.org homepage with a clear focus on 3 different userstories.
One small work we have been doing can be seen in the following video:
 Drupal quickstart from daniel wehner on Vimeo.
To summarize this video: It should be possible to start Drupal as quickly as possible:</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://dawehner.github.io/about/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/about/</guid>
      <description>TODO
A lists of podcasts I enjoy listening to can be found here</description>
    </item>
    
    <item>
      <title>Realtime watchdog powered by PHP, Drupal and Elm</title>
      <link>https://dawehner.github.io/posts/2017-10-10-realtime-watchdog/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-10-10-realtime-watchdog/</guid>
      <description>Motivation For my own interest, so mostly for the sake of learning new things, I try to implement some classical Drupal UIs in ELM.
One of them is the dblog UI.
The classical dblog UI allows you to see the latest log entries, filter and sort by them. On top of that I wanted to actually make use of the capabilities of a modern UI:
Let&amp;rsquo;s stream log entries to the browser:</description>
    </item>
    
    <item>
      <title>Emoji code review</title>
      <link>https://dawehner.github.io/posts/2017-09-07-emoji-code-review/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-09-07-emoji-code-review/</guid>
      <description>Problem From my personal experience the hardest part of projects isn&amp;rsquo;t the technical side nor the project managment side or anything like this, its communication. Communication problems leads to demotivation, hours of lost work etc.
A small subset of this space is communicating clearly in code reviews. Many people use tools like github to basically comment on bits of code, but there is no semantic meaning attached to each comment.</description>
    </item>
    
    <item>
      <title>Access inaccessible git commits</title>
      <link>https://dawehner.github.io/posts/2017-05-19-access-inaccessible-commits/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-05-19-access-inaccessible-commits/</guid>
      <description>Note: This is mostly a personal note, but maybe helpful for others
I accidentally removed a local branch using git branch -D local-branch, but I forgot to push the last commit.
I found this on the interwebs. git log -reflog
which gets all the logs and I was able to cherry-pick from there on.</description>
    </item>
    
    <item>
      <title>Retry HTTP requests</title>
      <link>https://dawehner.github.io/posts/2017-05-19-guzzle-retry/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-05-19-guzzle-retry/</guid>
      <description>Problem As a matter of life we all learn stuff fails. This might be frame with our favourite picture, the street in front of our house, or more likely requests to APIs.
A call to a 3rd/2nd party API can fail due to various reasons:
 The client / server is under high load, which results into a timeout potentially The internet routes packages weird Currently something along the stack is deployed The universe just doesn&amp;rsquo;t like you for a second.</description>
    </item>
    
    <item>
      <title>Automatically clear the render cache when templates change</title>
      <link>https://dawehner.github.io/posts/2017-05-11-clear-render-cache-on-template-changes/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-05-11-clear-render-cache-on-template-changes/</guid>
      <description>Recently someone asked whether we can disable CSS/JS aggregation and render cache on local development sites. It is totally easy to do that, but we realized that keeping render cache enabled is important to not miss caching issues during development and then have issues once the site is deployed.
On the other hand its quite annoying to have to clear the render cache manually, everytime you touch any template.</description>
    </item>
    
    <item>
      <title>Clone a non composer repo with composer</title>
      <link>https://dawehner.github.io/posts/2017-05-10-composer-cloning-any-repo/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-05-10-composer-cloning-any-repo/</guid>
      <description>There are some usecases where you want to integrate arbitrary libraries into your system. One example I stumbled upon was some NPM library which stored some general taxonomy mappings in json files. In Drupal we wanted to synchronize these information.
Therefore we are using this small little bit in composer.json:
{ &amp;#34;repositories&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;package&amp;#34;, &amp;#34;package&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;namespace/name&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;dev-master&amp;#34;, &amp;#34;source&amp;#34;: { &amp;#34;url&amp;#34;: &amp;#34;https://github.com/example/example-repo.git&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;git&amp;#34;, &amp;#34;reference&amp;#34;: &amp;#34;master&amp;#34; } } } ] }  Once this is done you can use:</description>
    </item>
    
    <item>
      <title>Using tar the easy way</title>
      <link>https://dawehner.github.io/posts/2017-02-22-tar-commands/</link>
      <pubDate>Wed, 22 Feb 2017 09:08:31 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2017-02-22-tar-commands/</guid>
      <description>[Tar](https://en.wikipedia.org/wiki/Tar_(computing) (originally coming from Tape ARchive) is a common tool in the belt of both system adminstrators and users of unix like systems. It allows you to create archives of files and extract them later.
Traditionally people learn it by copying examples:
# Create / extract tar file tar cf example.tar file folder file2 tar xf example.tar file # Create / extract tar.gz file tar zcf example.tar.gz file folder file2 tar zxf example.</description>
    </item>
    
    <item>
      <title>APCU and some ramblings</title>
      <link>https://dawehner.github.io/posts/2016-07-13-osx-apc/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2016-07-13-osx-apc/</guid>
      <description>Introduction to APCU One integral part of Drupal 8 is its quite aggressive caching. One subpart is the usage of APC(u) for caching things in the critical path of the system. Let&amp;rsquo;s first see what APC(u) is and then see some potential problems with it.
Since PHP 5.6 we have an opcode cache built into PHP, so the previous package APC is not longer needed. There was a small component of APCU, which is basically a key value store shared between all instances of PHP on a single node.</description>
    </item>
    
    <item>
      <title>Extract a folder from a git repo into its own repo</title>
      <link>https://dawehner.github.io/posts/2016-11-18-subtree-git-history/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2016-11-18-subtree-git-history/</guid>
      <description>Let&amp;rsquo;s assume you work on some client project. After a while you realize that the nice small tool you wrote is actually reusable and can/should be shared as opensource.
Now there are a two of possiblities:
 Copy the files and give a shit about the history Extract the history from an existing repo.  But how would you extract a history from an existing repo?
Extract history from existing repo.</description>
    </item>
    
    <item>
      <title>Create a PDF from a couple of images</title>
      <link>https://dawehner.github.io/posts/2016-11-11-create-pdf-from-images/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2016-11-11-create-pdf-from-images/</guid>
      <description>Sometimes you just want to create a PDF from a couple of scanned document papers. One solution could be of course to embed these pages into LibreOffice / Word and then use a PDF printer to get it. Some people though like tools on the shell.
Therefore we can use imagemagick, which is probably already installed on your system. It provides a command line util called convert. convert first-image.png second-image.png image.</description>
    </item>
    
    <item>
      <title>Make sense of your watchdog entries</title>
      <link>https://dawehner.github.io/posts/2016-11-08-read-watchdog-entries/</link>
      <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2016-11-08-read-watchdog-entries/</guid>
      <description>Websites have errors, which are ideally logged. Logging though is one thing, you also need to make some sense out of them.
In an ideal world you would have some logging server like graylog or similar. Sadly this is not avaiable on every site.
Here is an example of just looking at error messages stored in the database, but the general toolsuite could be applied to everything.
Get the data We use drush to fetch the error messages from drupal:</description>
    </item>
    
    <item>
      <title>Remove all merged local branches</title>
      <link>https://dawehner.github.io/posts/2015-12-10-delet-merged-branches/</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2015-12-10-delet-merged-branches/</guid>
      <description>When you use git you often create a hell lot of custom branches. This is annoying.
With using a PR based workflow this results into proper merges, so we can truncate those branches.
git checkout master git branch --merged | grep -v &amp;#34;\*&amp;#34; | xargs -n 1 git branch -d </description>
    </item>
    
    <item>
      <title>Lua for all the things on your mac v1</title>
      <link>https://dawehner.github.io/posts/2015-11-22-hammerspoon/</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2015-11-22-hammerspoon/</guid>
      <description>One thing people really like about OSX is that everything works and is easy to use, but what is easy is not necessarily the best for your particular usecase.
This especially becomes important when it comes down to configurability / scriptablity. For my own purposes I use Hammerspoon which provides Lua wrappers for quite a lot of lower level APIs, so its easy to setup things a specific way.
Just a quick list of what you can do with it:</description>
    </item>
    
    <item>
      <title>Get notified on slow commands</title>
      <link>https://dawehner.github.io/posts/2015-11-19-notify-long-commands/</link>
      <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2015-11-19-notify-long-commands/</guid>
      <description>We are all lazy and we get distracted. One thing happens often… You run some slow command in your shell, switch to the browser, and bam… you are distracted.
What about sending an OS notification? Every time any command needs longer to run than let’s say 10 seconds then there is some notification to show so you can get right back to work each time.
Note: This is for Fish shell, which is a modern shell and really nice to use.</description>
    </item>
    
    <item>
      <title>Pretty print your json</title>
      <link>https://dawehner.github.io/posts/2015-10-18-pretty-print-json/</link>
      <pubDate>Sun, 18 Oct 2015 09:08:31 +0000</pubDate>
      
      <guid>https://dawehner.github.io/posts/2015-10-18-pretty-print-json/</guid>
      <description>Due to its simplicity compared to other formats like XML, JSON these days is completly ruling the marking of remote APIs, like REST.
Let&amp;rsquo;s have a look at one small problem which occurs quite often: curl &amp;#34;https://www.openthesaurus.de/synonyme/search?q=test&amp;amp;format=application/json&amp;#34; {&amp;#34;metaData&amp;#34;:{&amp;#34;apiVersion&amp;#34;:&amp;#34;0.2&amp;#34;,&amp;#34;warning&amp;#34;:&amp;#34;ACHTUNG: Bitte vor ernsthafter Nutzung feedback@openthesaurus.de kontaktieren, um bei API-Änderungen informiert zu werden&amp;#34;,&amp;#34;copyright&amp;#34;:&amp;#34;Copyright (C) 2014 Daniel Naber (www.danielnaber.de)&amp;#34;,&amp;#34;license&amp;#34;:&amp;#34;GNU LESSER GENERAL PUBLIC LICENSE Version 2.1&amp;#34;,&amp;#34;source&amp;#34;:&amp;#34;http://www.openthesaurus.de&amp;#34;,&amp;#34;date&amp;#34;:&amp;#34;Sun Oct 18 09:20:29 CEST 2015&amp;#34;},&amp;#34;synsets&amp;#34;:[{&amp;#34;id&amp;#34;:292,&amp;#34;categories&amp;#34;:[],&amp;#34;terms&amp;#34;:[{&amp;#34;term&amp;#34;:&amp;#34;Erprobung&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Probe&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Prüfung&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Test&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Versuch&amp;#34;}]},{&amp;#34;id&amp;#34;:4398,&amp;#34;categories&amp;#34;:[],&amp;#34;terms&amp;#34;:[{&amp;#34;term&amp;#34;:&amp;#34;Kontrolle&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Leistungsnachweis&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Prüfung&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Test&amp;#34;}]},{&amp;#34;id&amp;#34;:5752,&amp;#34;categories&amp;#34;:[],&amp;#34;terms&amp;#34;:[{&amp;#34;term&amp;#34;:&amp;#34;Klassenarbeit&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Klausur&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Lernerfolgskontrolle&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Prüfung&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Schularbeit&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Schulaufgabe&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Test&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Arbeit&amp;#34;,&amp;#34;level&amp;#34;:&amp;#34;umgangssprachlich&amp;#34;}]},{&amp;#34;id&amp;#34;:9138,&amp;#34;categories&amp;#34;:[],&amp;#34;terms&amp;#34;:[{&amp;#34;term&amp;#34;:&amp;#34;Experiment&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Probelauf&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Studie&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Test&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Testballon&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Testlauf&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Trockenlauf&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Trockentest&amp;#34;},{&amp;#34;term&amp;#34;:&amp;#34;Versuch&amp;#34;}]}]}⏎
Pretty print So you are either a guru or extremly motivated to remember the open braces for your own, otherwise you need help to read the JSON properly.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://dawehner.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dawehner.github.io/projects/</guid>
      <description>This page links and describes some of my personal projects.
 A simple electron based UI for tinypng to make it easy to compress images: tiny-UI An vocabulary trainer app written in elm to procrastinate from learning vocabularies: elm-vocab Tool to automatically notify finished longruning process: Done Slack PHP Bot: slack-phpeval Jupyer/Ipython kernel for PHP: jupyter-php A lot of Drupal specific code, see drupal.org and Github  </description>
    </item>
    
  </channel>
</rss>
